# CLI开发规则

## 架构设计

### 主要组件
- [cli/main.py](mdc:cli/main.py) - CLI入口点，处理参数解析和路由
- [cli/commands.py](mdc:cli/commands.py) - 具体命令实现
- 使用click或argparse库进行命令行参数处理

### 命令组织
- 每个命令应该是独立的函数或类
- 命令之间避免相互依赖
- 统一的错误处理和输出格式

## 开发规范

### 参数处理
- 提供清晰的参数说明和帮助信息
- 参数验证和类型检查
- 支持配置文件和环境变量

### 输出格式
- 统一的输出格式（JSON、表格、文本）
- 进度条和状态指示器
- 错误信息的友好展示

### 错误处理
- 优雅的错误处理和用户提示
- 详细的错误日志记录
- 支持调试模式

### 性能考虑
- 长时间运行的操作显示进度
- 支持异步操作
- 内存使用优化

## 用户体验

### 帮助系统
- 每个命令都有详细的帮助信息
- 提供使用示例
- 自动补全支持

### 配置管理
- 支持全局和项目级配置
- 配置文件的自动创建和验证
- 配置项的文档说明

### 日志系统
- 不同级别的日志输出
- 日志文件的轮转和管理
- 调试信息的详细记录
description:
globs:
alwaysApply: true
---
