# 加密框架开发规则

## 核心架构原则

### 模块化设计
- 每个模块只负责一个核心功能
- 模块间通过清晰的接口进行通信
- 避免循环依赖

### 加密引擎 ([core/crypto.py](mdc:core/crypto.py))
- 使用AES加密算法
- 密钥管理通过[auth.py](mdc:core/auth.py)统一处理
- 加密/解密操作应该是原子的和幂等的

### 授权系统 ([core/auth.py](mdc:core/auth.py))
- 支持硬件授权和环境变量密钥
- 密钥轮换和更新机制
- 授权失败时的优雅降级

### 文件发现 ([discovery/](mdc:discovery/))
- 自动发现Python和ONNX文件
- 可配置的过滤规则
- 支持递归目录扫描

### 动态加载 ([loaders/](mdc:loaders/))
- 透明解密和加载
- 内存安全，解密内容不落盘
- 智能缓存机制

## 开发指导

### 错误处理
- 使用[core/errors.py](mdc:core/errors.py)中定义的自定义异常
- 提供详细的错误信息和上下文
- 实现优雅的降级机制

### 性能优化
- 避免重复解密相同文件
- 使用内存映射文件处理大文件
- 异步处理I/O密集型操作

### 安全性
- 密钥不在日志中暴露
- 临时文件及时清理
- 内存中的敏感数据及时清零

### 配置管理
- 参考[config.py](mdc:config.py)的配置模式
- 支持环境变量覆盖
- 配置验证和默认值处理
description:
globs:
alwaysApply: true
---
