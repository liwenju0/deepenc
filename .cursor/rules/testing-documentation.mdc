# 测试和文档规则

## 测试规范

### 测试框架
- 使用[test_framework.py](mdc:test_framework.py)作为测试模板
- 使用pytest或unittest进行测试
- 测试覆盖率目标：80%以上

### 测试组织
- 单元测试：测试单个函数和类
- 集成测试：测试模块间交互
- 端到端测试：测试完整工作流程

### 测试用例
- 正常情况测试
- 边界条件测试
- 错误情况测试
- 性能测试

### 测试数据
- 使用固定的测试数据
- 避免依赖外部资源
- 测试数据的清理和重置

## 文档规范

### 代码文档
- 所有公共API都要有文档字符串
- 使用Google风格的文档字符串
- 包含参数、返回值、异常和示例

### 项目文档
- [README.md](mdc:README.md) - 项目概述和快速开始
- [FRAMEWORK_SUMMARY.md](mdc:FRAMEWORK_SUMMARY.md) - 框架详细说明
- [INSTALL.md](mdc:INSTALL.md) - 安装和配置指南
- [docs/](mdc:docs/) - 详细文档目录

### 文档维护
- 代码变更时同步更新文档
- 定期检查和更新文档
- 提供使用示例和最佳实践

## 示例代码

### 示例组织
- [examples/](mdc:examples/) - 示例代码目录
- 从简单到复杂的渐进式示例
- 每个示例都有详细说明

### 示例质量
- 示例代码可以直接运行
- 包含必要的依赖说明
- 提供预期的输出结果
description:
globs:
alwaysApply: true
---
